class Solution {
public:
    int helper(int m, int n, vector<vector<int>>& dp) {
        if (m==0 && n==0) return 1;
        
        if(m<0 || n<0) return 0;
        
        if (dp[m][n] != -1) return dp[m][n]; 
        
        int right = helper(m, n-1, dp);
        int bottom = helper(m-1, n, dp);
        
        return dp[m][n] = bottom+right;
    }
    
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m+1, vector<int> (n+1, -1));
        dp[0][0] = 1;
        
        for (int i=0; i<=m-1; i++) {
            for (int j=0; j<=n-1; j++) {
                if (i==0 and j==0) continue;
                
                int right=0; int bottom=0;
                
                if (j>0) right = dp[i][j-1];
                if (i>0) bottom = dp[i-1][j];
                
                dp[i][j] = right+bottom;
            }
        }
        
        return dp[m-1][n-1];
    }
};

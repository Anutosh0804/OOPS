class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size();
        int water = 0;
        int left_max=0, right_max=0;
        int left=0, right=n-1;
        
        while (left <= right) {
            if (height[left] <= height[right]) {
                if (left_max <= height[left]) left_max = height[left];
                else water += left_max - height[left];
                left++;
            } else {
                if (right_max <= height[right]) right_max = height[right];
                else water += right_max - height[right];
                right--;
            }
        }
        
        while (left <= right) {
            if (height[left] <= height[right]) {
                if (left_max <= height[left]) left_max = height[left];
                else water += left_max - height[left];
                left++;
            } else {
                if (right_max <= height[right]) right_max = height[right];
                else water += right_max - height[right];
                right--;
            }
        }
        return water;
    }
};
